buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven/" }
        maven { url = "https://repo.spongepowered.org/maven/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'java'
    id 'scala'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id "net.covers1624.signing" version '1.1.3'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: "org.spongepowered.mixin"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

group = "codechicken"
archivesBaseName = "CBMultipart"

sourceSets.main.resources.srcDirs += "src/main/generated"

file('build.properties').withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

def signProps = [:]
if (System.getenv("KEY_STORE")) {
    println "Using Env variables for jar signing."
    signProps['keyStore'] = System.getenv("KEY_STORE")
    file(System.getenv("KEY_STORE_PROPS")).withReader {
        def props = new Properties()
        props.load(it)
        signProps.putAll(props)
    }
} else if (project.hasProperty('keyStore')) {
    println "Using Project properties for jar signing."
    signProps['keyStore'] = project.getProperty('keyStore')
    signProps['storePass'] = project.getProperty('keyStorePass')
    signProps['alias'] = project.getProperty('keyStoreAlias')
    signProps['keyPass'] = project.getProperty('keyStoreKeyPass')
} else {
    println 'No signing secrets found, build will not be signed.'
}

config.mod_version = "${config.mod_version}." + (System.getenv("BUILD_NUMBER") ?: "1")
version = "${config.mc_version}-${config.mod_version}"
println "Starting build of ${archivesBaseName}, Version: ${config.mod_version}"
println "Using Forge: ${config.forge_version}, for Minecraft: ${config.mc_version}, with Mappings: ${config.mappings}"

minecraft {
    mappings channel: 'official', version: config.mc_version
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            workingDirectory file('run')
            mods { cb_multipart { source sourceSets.main } }
            mods { cb_microblock { source sourceSets.main } }
        }
        server {
            workingDirectory file('run')
            mods { cb_multipart { source sourceSets.main } }
            mods { cb_microblock { source sourceSets.main } }
        }
        data {
            workingDirectory file('run')
            args '--mod', 'cb_multipart', '--mod', 'cb_microblock', '--all', '--flat', '--output', file("src/main/generated"), '--existing', file("src/main/resources")
            mods { cb_multipart { source sourceSets.main } }
            mods { cb_microblock { source sourceSets.main } }
        }
    }
}

configurations {
    shadow
    compile.extendsFrom shadow
}

repositories {
    mavenLocal()
    maven { url = "https://maven.covers1624.net/" }
    maven { url = "https://dvs1.progwml6.com/files/maven" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"

    //Scala
    compile "org.scala-lang:scala-compiler:${config.scala_version}"
    compile "org.scala-lang:scala-library:${config.scala_version}"
    compile "org.scala-lang.modules:scala-java8-compat_${config.scala_compat_version}"
    compile "net.minecraftforge:Scorge:${config.scorge_version}"

    //Mod deps
    compile "codechicken:CodeChickenLib:${config.mc_version}-${config.ccl_version}:deobf"
    compileOnly fg.deobf("mezz.jei:jei-${config.mc_version}:${config.jei_version}")

    //Packed into built jar.
    shadow "codechicken:TraitMixinCompiler:${config.mixin_version}"
    shadow "codechicken:TraitMixinCompiler:${config.mixin_version}:forge"
    shadow "codechicken:TraitMixinCompiler:${config.mixin_version}:scala"
    shadow "codechicken:ChickenASM:${config.chicken_asm_version}:modlauncher"

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0'
}

//TODO, needed until 'main' is a fully java source set.
task mixinAnnotations(type: Exec) {
    dependsOn compileScala, createMcpToSrg
    compileScala.finalizedBy it

    doFirst {
        executable = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(8)
        }.get().executablePath
        def destPath = compileScala.destinationDir.toPath()
        def args = [
                "-proc:only",
                "-d",
                compileScala.destinationDir,
                "-classpath",
                "${configurations.minecraft.asPath}${File.pathSeparatorChar}${tasks.compileScala.outputs.files.asPath}",
                "-AreobfTsrgFile=${tasks.createMcpToSrg.outputs.files[0]}",
                "-AoutRefMapFile=${new File(compileScala.destinationDir, "mixins.cbmultipart.refmap.json")}",
                "-AmappingTypes=tsrg",
        ]
        tasks.compileScala.outputs.files.asFileTree.each {
            def name = it.toString()
            if (name.endsWith(".class") && name.contains("mixin")) {
                args << destPath.relativize(it.toPath()).toString().replace(".class", "").replace(File.pathSeparator, ".").replace("/", ".")
            }
        }
        setArgs(args)
    }
}

mixin {
    add(sourceSets.main, "mixins.cbmultipart.refmap.json")
}

reobf {
    shadowJar {}
    jar {//Disable reobfJar
        enabled = false
    }
}

signing {
    if (!signProps.isEmpty()) {
        jars {
            sign shadowJar
            sign deobfJar
            after reobfShadowJar

            keyStore = signProps.keyStore
            alias = signProps.alias
            storePass = signProps.storePass
            keyPass = signProps.keyPass
        }
    }
}

processResources { task ->
    inputs.property "mod_version", config.mod_version
    inputs.property "mc_version", config.mc_version

    from(sourceSets.main.resources.srcDirs) { spec ->
        spec.include 'META-INF/mods.toml'
        task.doFirst {
            spec.expand 'version': config.mod_version,
                    'mc_version': config.mc_version,
                    'ccl_version': resolve("CodeChickenLib")
        }
    }
}

jar.enabled = false//Disable normal jar, is replaced by ShadowJar.
shadowJar {
    finalizedBy 'reobfShadowJar'
    classifier 'universal'
    manifest {
        attributes 'Specification-Title': archivesBaseName
        attributes 'Specification-Vendor': 'covers1624'
        attributes 'Specification-Version': "1"
        attributes 'Implementation-Title': archivesBaseName
        attributes 'Implementation-Vendor': 'covers1624'
        attributes 'Implementation-Version': version
        attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes 'MixinConfigs': 'mixins.cbmultipart.json'
    }

    configurations = [project.configurations.shadow]
    dependencies {
        include(dependency("codechicken:TraitMixinCompiler:"))
        include(dependency("codechicken:ChickenASM:"))
    }
    mergeServiceFiles()
    exclude 'module-info.class'
    //Transitives are flattened for some stupid reason..
    exclude 'javax/**'
    exclude 'org/apache/**'
    exclude 'org/objectweb/**'
    exclude 'com/google/**'
    exclude 'scala/reflect/**'
    exclude 'reflect.properties'
    exclude 'NOTICE'
    exclude 'LICENSE'
    exclude 'Log4j-charsets.properties'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/versions/**'
    exclude 'META-INF/services/org.apache.**'
}


task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    build.dependsOn it
    from sourceSets.main.output
    classifier = 'deobf'

    manifest {
        attributes 'Specification-Title': archivesBaseName
        attributes 'Specification-Vendor': 'covers1624'
        attributes 'Specification-Version': "1"
        attributes 'Implementation-Title': archivesBaseName
        attributes 'Implementation-Vendor': 'covers1624'
        attributes 'Implementation-Version': version
        attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes 'MixinConfigs': 'mixins.cbmultipart.json'
    }

    configurations = [project.configurations.shadow]
    dependencies {
        include(dependency("codechicken:TraitMixinCompiler:"))
        include(dependency("codechicken:ChickenASM:"))
    }
    mergeServiceFiles()
    exclude 'module-info.class'
    //Transitives are flattened for some stupid reason..
    exclude 'javax/**'
    exclude 'org/apache/**'
    exclude 'org/objectweb/**'
    exclude 'com/google/**'
    exclude 'scala/reflect/**'
    exclude 'reflect.properties'
    exclude 'NOTICE'
    exclude 'LICENSE'
    exclude 'Log4j-charsets.properties'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/versions/**'
    exclude 'META-INF/services/org.apache.**'
}

build.dependsOn shadowJar

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://nexus.covers1624.net/repository/maven-releases/"
                credentials {
                    username 'covers1624'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        Multipart(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact shadowJar
            artifact srcJar
            artifact deobfJar

            pom {
                name = archivesBaseName
                description = archivesBaseName
                //The publish plugin doesnt like GString's here apparently..
                url = "https://github.com/TheCBProject/${archivesBaseName}".toString()
                scm {
                    url = "https://github.com/TheCBProject/${archivesBaseName}".toString()
                    connection = "scm:git:git://github.com/TheCBProject/${archivesBaseName}.git".toString()
                    connection = "scm:git:git@github.com:TheCBProject/${archivesBaseName}.git".toString()
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/TheCBProject/${archivesBaseName}/issues".toString()
                }
                licenses {
                    license {
                        name = "GNU Lesser Public License (GPL), Version 2.1"
                        url = "https://raw.githubusercontent.com/TheCBProject/${archivesBaseName}/master/LICENSE.txt".toString()
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'covers1624'
                        name = 'covers1624'
                    }
                }
                developers {
                    developer {
                        id = 'chicken-bones'
                        name = 'chicken-bones'
                    }
                }
            }
        }
    }
}

/**
 * Polls the 'compile' configuration for a dependency with the given module name
 * and resolves, and returns its version. E.g: '1.2.+' will resolve to '1.2.3.4'
 *
 * @param module The module to search for.
 * @param chop If the string should be chopped on the last '-' in its string.
 * @param configuration The name of the configuration to search.
 * @param errorMissing If an error should be thrown if it can't be found.
 * @return The version string, '0' if 'errorMissing' is false and nothing was found.
 */
def resolve(module, chop = true, configuration = 'compile', errorMissing = true) {
    //Copy and lenient resolve the configuration, Forge cant be resolved at this time so lenient is required.
    def filtered = configurations.getByName(configuration).copy().incoming.artifactView({ it.lenient = true }).artifacts
            .findAll { it.id.componentIdentifier.module == module }
            .collect { it.id.componentIdentifier.version }
    if (filtered.size() > 1) {
        println "WARNING: Found ${filtered.size()} Dependencies with ModuleName '${module}' in configuration '${configuration.name}'"
    }
    if (errorMissing && filtered.isEmpty()) {
        throw new RuntimeException("Failed resolve dependency version for '${module}'")
    }
    if (filtered.isEmpty()) return "0"
    def version = filtered.first() as String
    if (chop) {
        def idx = version.lastIndexOf('-')
        return version.substring(idx + 1)
    }
    return version
}
